
//----------------------------------------------------
// The following code was generated by CUP v0.10j
// Thu Jan 28 00:11:41 CET 2016
//----------------------------------------------------

package syntactical;

import absyn.*;
import errorMsg.ErrorMsg;
import lexical.Lexer;

/** CUP v0.10j generated parser.
  * @version Thu Jan 28 00:11:41 CET 2016
  */
public class Parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\103\000\002\002\004\000\002\014\003\000\002\014" +
    "\005\000\002\014\006\000\002\015\003\000\002\015\003" +
    "\000\002\015\003\000\002\015\003\000\002\015\004\000" +
    "\002\016\003\000\002\016\003\000\002\003\007\000\002" +
    "\003\011\000\002\004\002\000\002\004\006\000\002\004" +
    "\010\000\002\004\012\000\002\004\006\000\002\004\005" +
    "\000\002\005\002\000\002\005\003\000\002\006\004\000" +
    "\002\006\006\000\002\007\005\000\002\007\006\000\002" +
    "\007\003\000\002\007\004\000\002\007\010\000\002\007" +
    "\012\000\002\007\007\000\002\007\013\000\002\007\005" +
    "\000\002\007\004\000\002\007\010\000\002\007\006\000" +
    "\002\010\003\000\002\010\005\000\002\011\003\000\002" +
    "\011\003\000\002\011\003\000\002\011\003\000\002\011" +
    "\003\000\002\011\003\000\002\011\003\000\002\011\007" +
    "\000\002\011\007\000\002\011\005\000\002\011\005\000" +
    "\002\011\005\000\002\011\005\000\002\011\005\000\002" +
    "\011\004\000\002\011\005\000\002\011\005\000\002\011" +
    "\005\000\002\011\005\000\002\011\005\000\002\011\005" +
    "\000\002\011\005\000\002\011\005\000\002\011\004\000" +
    "\002\011\010\000\002\011\005\000\002\012\002\000\002" +
    "\012\003\000\002\013\003\000\002\013\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\241\000\004\010\005\001\002\000\004\002\243\001" +
    "\002\000\004\004\006\001\002\000\006\011\010\031\007" +
    "\001\002\000\016\012\016\013\020\014\013\032\ufff4\065" +
    "\015\067\014\001\002\000\004\004\011\001\002\000\004" +
    "\031\012\001\002\000\016\012\016\013\020\014\013\032" +
    "\ufff4\065\015\067\014\001\002\000\004\025\234\001\002" +
    "\000\052\004\053\005\054\006\061\007\055\015\060\016" +
    "\027\017\024\020\026\025\050\031\052\035\057\050\043" +
    "\053\047\056\041\057\062\060\044\061\051\062\046\063" +
    "\056\066\037\001\002\000\004\004\227\001\002\000\012" +
    "\004\021\016\027\017\024\020\026\001\002\000\004\032" +
    "\223\001\002\000\014\004\021\016\027\017\024\020\026" +
    "\021\025\001\002\000\072\004\ufffd\012\ufffd\013\ufffd\014" +
    "\ufffd\022\ufffd\023\ufffd\024\ufffd\026\ufffd\027\ufffd\030\ufffd" +
    "\032\ufffd\033\ufffd\034\ufffd\035\ufffd\036\ufffd\037\ufffd\040" +
    "\ufffd\041\ufffd\042\ufffd\043\ufffd\044\ufffd\045\ufffd\046\ufffd" +
    "\047\ufffd\052\ufffd\055\ufffd\065\ufffd\067\ufffd\001\002\000" +
    "\004\004\031\001\002\000\006\004\ufff8\052\030\001\002" +
    "\000\072\004\ufffa\012\ufffa\013\ufffa\014\ufffa\022\ufffa\023" +
    "\ufffa\024\ufffa\026\ufffa\027\ufffa\030\ufffa\032\ufffa\033\ufffa" +
    "\034\ufffa\035\ufffa\036\ufffa\037\ufffa\040\ufffa\041\ufffa\042" +
    "\ufffa\043\ufffa\044\ufffa\045\ufffa\046\ufffa\047\ufffa\052\ufffa" +
    "\055\ufffa\065\ufffa\067\ufffa\001\002\000\004\004\ufff7\001" +
    "\002\000\072\004\ufffc\012\ufffc\013\ufffc\014\ufffc\022\ufffc" +
    "\023\ufffc\024\ufffc\026\ufffc\027\ufffc\030\ufffc\032\ufffc\033" +
    "\ufffc\034\ufffc\035\ufffc\036\ufffc\037\ufffc\040\ufffc\041\ufffc" +
    "\042\ufffc\043\ufffc\044\ufffc\045\ufffc\046\ufffc\047\ufffc\052" +
    "\ufffc\055\ufffc\065\ufffc\067\ufffc\001\002\000\072\004\ufffb" +
    "\012\ufffb\013\ufffb\014\ufffb\022\ufffb\023\ufffb\024\ufffb\026" +
    "\ufffb\027\ufffb\030\ufffb\032\ufffb\033\ufffb\034\ufffb\035\ufffb" +
    "\036\ufffb\037\ufffb\040\ufffb\041\ufffb\042\ufffb\043\ufffb\044" +
    "\ufffb\045\ufffb\046\ufffb\047\ufffb\052\ufffb\055\ufffb\065\ufffb" +
    "\067\ufffb\001\002\000\072\004\ufff9\012\ufff9\013\ufff9\014" +
    "\ufff9\022\ufff9\023\ufff9\024\ufff9\026\ufff9\027\ufff9\030\ufff9" +
    "\032\ufff9\033\ufff9\034\ufff9\035\ufff9\036\ufff9\037\ufff9\040" +
    "\ufff9\041\ufff9\042\ufff9\043\ufff9\044\ufff9\045\ufff9\046\ufff9" +
    "\047\ufff9\052\ufff9\055\ufff9\065\ufff9\067\ufff9\001\002\000" +
    "\004\025\032\001\002\000\014\004\021\016\027\017\024" +
    "\020\026\026\uffee\001\002\000\004\026\uffed\001\002\000" +
    "\006\004\220\052\030\001\002\000\004\026\036\001\002" +
    "\000\052\004\053\005\054\006\061\007\055\015\060\016" +
    "\027\017\024\020\026\025\050\031\052\035\057\050\043" +
    "\053\047\056\041\057\062\060\044\061\051\062\046\063" +
    "\056\066\037\001\002\000\004\025\215\001\002\000\006" +
    "\004\212\052\030\001\002\000\004\025\206\001\002\000" +
    "\016\012\016\013\020\014\013\032\ufff4\065\015\067\014" +
    "\001\002\000\030\004\066\005\054\006\061\007\055\015" +
    "\060\025\050\035\057\050\043\061\051\062\046\063\056" +
    "\001\002\000\052\004\066\005\054\006\061\007\055\012" +
    "\uffe8\013\uffe8\014\uffe8\015\060\023\uffe8\025\050\026\uffe8" +
    "\032\uffe8\035\057\050\043\055\uffe8\061\051\062\046\063" +
    "\056\065\uffe8\067\uffe8\001\002\000\040\024\102\027\104" +
    "\033\176\034\075\035\071\036\103\037\072\040\076\041" +
    "\074\042\105\043\077\044\100\045\073\046\070\047\106" +
    "\001\002\000\066\012\uffdb\013\uffdb\014\uffdb\022\uffdb\023" +
    "\uffdb\024\uffdb\026\uffdb\027\uffdb\030\uffdb\032\uffdb\033\uffdb" +
    "\034\uffdb\035\uffdb\036\uffdb\037\uffdb\040\uffdb\041\uffdb\042" +
    "\uffdb\043\uffdb\044\uffdb\045\uffdb\046\uffdb\047\uffdb\055\uffdb" +
    "\065\uffdb\067\uffdb\001\002\000\004\025\167\001\002\000" +
    "\030\004\066\005\054\006\061\007\055\015\060\025\050" +
    "\035\057\050\043\061\051\062\046\063\056\001\002\000" +
    "\066\012\uffd6\013\uffd6\014\uffd6\022\uffd6\023\uffd6\024\uffd6" +
    "\026\uffd6\027\uffd6\030\uffd6\032\uffd6\033\uffd6\034\uffd6\035" +
    "\uffd6\036\uffd6\037\uffd6\040\uffd6\041\uffd6\042\uffd6\043\uffd6" +
    "\044\uffd6\045\uffd6\046\uffd6\047\uffd6\055\uffd6\065\uffd6\067" +
    "\uffd6\001\002\000\054\004\053\005\054\006\061\007\055" +
    "\015\060\016\027\017\024\020\026\025\050\031\052\032" +
    "\157\035\057\050\043\053\047\056\041\057\062\060\044" +
    "\061\051\062\046\063\056\066\037\001\002\000\046\004" +
    "\ufffd\024\000\027\000\033\000\034\000\035\000\036\000" +
    "\037\000\040\000\041\000\042\000\043\000\044\000\045" +
    "\000\046\000\047\000\051\000\052\ufffd\001\002\000\066" +
    "\012\uffd7\013\uffd7\014\uffd7\022\uffd7\023\uffd7\024\uffd7\026" +
    "\uffd7\027\uffd7\030\uffd7\032\uffd7\033\uffd7\034\uffd7\035\uffd7" +
    "\036\uffd7\037\uffd7\040\uffd7\041\uffd7\042\uffd7\043\uffd7\044" +
    "\uffd7\045\uffd7\046\uffd7\047\uffd7\055\uffd7\065\uffd7\067\uffd7" +
    "\001\002\000\066\012\uffd8\013\uffd8\014\uffd8\022\uffd8\023" +
    "\uffd8\024\uffd8\026\uffd8\027\uffd8\030\uffd8\032\uffd8\033\uffd8" +
    "\034\uffd8\035\uffd8\036\uffd8\037\uffd8\040\uffd8\041\uffd8\042" +
    "\uffd8\043\uffd8\044\uffd8\045\uffd8\046\uffd8\047\uffd8\055\uffd8" +
    "\065\uffd8\067\uffd8\001\002\000\066\012\uffda\013\uffda\014" +
    "\uffda\022\uffda\023\uffda\024\uffda\026\uffda\027\uffda\030\uffda" +
    "\032\uffda\033\uffda\034\uffda\035\uffda\036\uffda\037\uffda\040" +
    "\uffda\041\uffda\042\uffda\043\uffda\044\uffda\045\uffda\046\uffda" +
    "\047\uffda\055\uffda\065\uffda\067\uffda\001\002\000\030\004" +
    "\066\005\054\006\061\007\055\015\060\025\050\035\057" +
    "\050\043\061\051\062\046\063\056\001\002\000\012\004" +
    "\146\016\027\017\024\020\026\001\002\000\066\012\uffd9" +
    "\013\uffd9\014\uffd9\022\uffd9\023\uffd9\024\uffd9\026\uffd9\027" +
    "\uffd9\030\uffd9\032\uffd9\033\uffd9\034\uffd9\035\uffd9\036\uffd9" +
    "\037\uffd9\040\uffd9\041\uffd9\042\uffd9\043\uffd9\044\uffd9\045" +
    "\uffd9\046\uffd9\047\uffd9\055\uffd9\065\uffd9\067\uffd9\001\002" +
    "\000\004\025\136\001\002\000\042\024\uffdc\027\uffdc\033" +
    "\uffdc\034\uffdc\035\uffdc\036\uffdc\037\uffdc\040\uffdc\041\uffdc" +
    "\042\uffdc\043\uffdc\044\uffdc\045\uffdc\046\uffdc\047\uffdc\051" +
    "\064\001\002\000\030\004\066\005\054\006\061\007\055" +
    "\015\060\025\050\035\057\050\043\061\051\062\046\063" +
    "\056\001\002\000\062\012\uffea\013\uffea\014\uffea\023\uffea" +
    "\024\102\026\uffea\027\104\032\uffea\033\101\034\075\035" +
    "\071\036\103\037\072\040\076\041\074\042\105\043\077" +
    "\044\100\045\073\046\070\047\106\055\uffea\065\uffea\067" +
    "\uffea\001\002\000\066\012\000\013\000\014\000\022\000" +
    "\023\000\024\000\026\000\027\000\030\000\032\000\033" +
    "\000\034\000\035\000\036\000\037\000\040\000\041\000" +
    "\042\000\043\000\044\000\045\000\046\000\047\000\055" +
    "\000\065\000\067\000\001\002\000\066\012\uffdc\013\uffdc" +
    "\014\uffdc\022\uffdc\023\uffdc\024\uffdc\026\uffdc\027\uffdc\030" +
    "\uffdc\032\uffdc\033\uffdc\034\uffdc\035\uffdc\036\uffdc\037\uffdc" +
    "\040\uffdc\041\uffdc\042\uffdc\043\uffdc\044\uffdc\045\uffdc\046" +
    "\uffdc\047\uffdc\055\uffdc\065\uffdc\067\uffdc\001\002\000\030" +
    "\004\066\005\054\006\061\007\055\015\060\025\050\035" +
    "\057\050\043\061\051\062\046\063\056\001\002\000\030" +
    "\004\066\005\054\006\061\007\055\015\060\025\050\035" +
    "\057\050\043\061\051\062\046\063\056\001\002\000\030" +
    "\004\066\005\054\006\061\007\055\015\060\025\050\035" +
    "\057\050\043\061\051\062\046\063\056\001\002\000\030" +
    "\004\066\005\054\006\061\007\055\015\060\025\050\035" +
    "\057\050\043\061\051\062\046\063\056\001\002\000\030" +
    "\004\066\005\054\006\061\007\055\015\060\025\050\035" +
    "\057\050\043\061\051\062\046\063\056\001\002\000\030" +
    "\004\066\005\054\006\061\007\055\015\060\025\050\035" +
    "\057\050\043\061\051\062\046\063\056\001\002\000\030" +
    "\004\066\005\054\006\061\007\055\015\060\025\050\035" +
    "\057\050\043\061\051\062\046\063\056\001\002\000\030" +
    "\004\066\005\054\006\061\007\055\015\060\025\050\035" +
    "\057\050\043\061\051\062\046\063\056\001\002\000\030" +
    "\004\066\005\054\006\061\007\055\015\060\025\050\035" +
    "\057\050\043\061\051\062\046\063\056\001\002\000\004" +
    "\004\115\001\002\000\012\004\021\016\027\017\024\020" +
    "\026\001\002\000\030\004\066\005\054\006\061\007\055" +
    "\015\060\025\050\035\057\050\043\061\051\062\046\063" +
    "\056\001\002\000\030\004\066\005\054\006\061\007\055" +
    "\015\060\025\050\035\057\050\043\061\051\062\046\063" +
    "\056\001\002\000\030\004\066\005\054\006\061\007\055" +
    "\015\060\025\050\035\057\050\043\061\051\062\046\063" +
    "\056\001\002\000\030\004\066\005\054\006\061\007\055" +
    "\015\060\025\050\035\057\050\043\061\051\062\046\063" +
    "\056\001\002\000\066\012\uffc6\013\uffc6\014\uffc6\022\uffc6" +
    "\023\uffc6\024\uffc6\026\uffc6\027\104\030\uffc6\032\uffc6\033" +
    "\101\034\075\035\071\036\103\037\072\040\076\041\074" +
    "\042\105\043\077\044\100\045\073\046\uffc6\047\uffc6\055" +
    "\uffc6\065\uffc6\067\uffc6\001\002\000\052\012\uffcc\013\uffcc" +
    "\014\uffcc\022\uffcc\023\uffcc\024\uffcc\026\uffcc\027\104\030" +
    "\uffcc\032\uffcc\033\101\034\075\035\071\036\103\037\072" +
    "\046\uffcc\047\uffcc\055\uffcc\065\uffcc\067\uffcc\001\002\000" +
    "\042\024\102\027\104\030\112\033\101\034\075\035\071" +
    "\036\103\037\072\040\076\041\074\042\105\043\077\044" +
    "\100\045\073\046\070\047\106\001\002\000\070\012\ufffe" +
    "\013\ufffe\014\ufffe\022\ufffe\023\ufffe\024\ufffe\026\ufffe\027" +
    "\ufffe\030\ufffe\032\ufffe\033\ufffe\034\ufffe\035\ufffe\036\ufffe" +
    "\037\ufffe\040\ufffe\041\ufffe\042\ufffe\043\ufffe\044\ufffe\045" +
    "\ufffe\046\ufffe\047\ufffe\051\ufffe\055\ufffe\065\ufffe\067\ufffe" +
    "\001\002\000\066\012\uffd0\013\uffd0\014\uffd0\022\uffd0\023" +
    "\uffd0\024\uffd0\026\uffd0\027\104\030\uffd0\032\uffd0\033\101" +
    "\034\uffd0\035\uffd0\036\uffd0\037\uffd0\040\uffd0\041\uffd0\042" +
    "\uffd0\043\uffd0\044\uffd0\045\uffd0\046\uffd0\047\uffd0\055\uffd0" +
    "\065\uffd0\067\uffd0\001\002\000\070\012\uffd3\013\uffd3\014" +
    "\uffd3\022\uffd3\023\uffd3\024\uffd3\026\uffd3\027\uffd3\030\uffd3" +
    "\032\uffd3\033\uffd3\034\uffd3\035\uffd3\036\uffd3\037\uffd3\040" +
    "\uffd3\041\uffd3\042\uffd3\043\uffd3\044\uffd3\045\uffd3\046\uffd3" +
    "\047\uffd3\052\030\055\uffd3\065\uffd3\067\uffd3\001\002\000" +
    "\070\012\uffff\013\uffff\014\uffff\022\uffff\023\uffff\024\uffff" +
    "\025\116\026\uffff\027\uffff\030\uffff\032\uffff\033\uffff\034" +
    "\uffff\035\uffff\036\uffff\037\uffff\040\uffff\041\uffff\042\uffff" +
    "\043\uffff\044\uffff\045\uffff\046\uffff\047\uffff\055\uffff\065" +
    "\uffff\067\uffff\001\002\000\032\004\066\005\054\006\061" +
    "\007\055\015\060\025\050\026\uffc2\035\057\050\043\061" +
    "\051\062\046\063\056\001\002\000\004\026\uffc1\001\002" +
    "\000\004\026\124\001\002\000\044\022\122\024\102\026" +
    "\uffc0\027\104\033\101\034\075\035\071\036\103\037\072" +
    "\040\076\041\074\042\105\043\077\044\100\045\073\046" +
    "\070\047\106\001\002\000\030\004\066\005\054\006\061" +
    "\007\055\015\060\025\050\035\057\050\043\061\051\062" +
    "\046\063\056\001\002\000\004\026\uffbf\001\002\000\066" +
    "\012\uffc4\013\uffc4\014\uffc4\022\uffc4\023\uffc4\024\uffc4\026" +
    "\uffc4\027\uffc4\030\uffc4\032\uffc4\033\uffc4\034\uffc4\035\uffc4" +
    "\036\uffc4\037\uffc4\040\uffc4\041\uffc4\042\uffc4\043\uffc4\044" +
    "\uffc4\045\uffc4\046\uffc4\047\uffc4\055\uffc4\065\uffc4\067\uffc4" +
    "\001\002\000\052\012\uffca\013\uffca\014\uffca\022\uffca\023" +
    "\uffca\024\uffca\026\uffca\027\104\030\uffca\032\uffca\033\101" +
    "\034\075\035\071\036\103\037\072\046\uffca\047\uffca\055" +
    "\uffca\065\uffca\067\uffca\001\002\000\052\012\uffcb\013\uffcb" +
    "\014\uffcb\022\uffcb\023\uffcb\024\uffcb\026\uffcb\027\104\030" +
    "\uffcb\032\uffcb\033\101\034\075\035\071\036\103\037\072" +
    "\046\uffcb\047\uffcb\055\uffcb\065\uffcb\067\uffcb\001\002\000" +
    "\052\012\uffc9\013\uffc9\014\uffc9\022\uffc9\023\uffc9\024\uffc9" +
    "\026\uffc9\027\104\030\uffc9\032\uffc9\033\101\034\075\035" +
    "\071\036\103\037\072\046\uffc9\047\uffc9\055\uffc9\065\uffc9" +
    "\067\uffc9\001\002\000\066\012\uffd2\013\uffd2\014\uffd2\022" +
    "\uffd2\023\uffd2\024\uffd2\026\uffd2\027\104\030\uffd2\032\uffd2" +
    "\033\101\034\uffd2\035\uffd2\036\103\037\072\040\uffd2\041" +
    "\uffd2\042\uffd2\043\uffd2\044\uffd2\045\uffd2\046\uffd2\047\uffd2" +
    "\055\uffd2\065\uffd2\067\uffd2\001\002\000\052\012\uffc8\013" +
    "\uffc8\014\uffc8\022\uffc8\023\uffc8\024\uffc8\026\uffc8\027\104" +
    "\030\uffc8\032\uffc8\033\101\034\075\035\071\036\103\037" +
    "\072\046\uffc8\047\uffc8\055\uffc8\065\uffc8\067\uffc8\001\002" +
    "\000\052\012\uffcd\013\uffcd\014\uffcd\022\uffcd\023\uffcd\024" +
    "\uffcd\026\uffcd\027\104\030\uffcd\032\uffcd\033\101\034\075" +
    "\035\071\036\103\037\072\046\uffcd\047\uffcd\055\uffcd\065" +
    "\uffcd\067\uffcd\001\002\000\066\012\uffcf\013\uffcf\014\uffcf" +
    "\022\uffcf\023\uffcf\024\uffcf\026\uffcf\027\104\030\uffcf\032" +
    "\uffcf\033\101\034\uffcf\035\uffcf\036\uffcf\037\uffcf\040\uffcf" +
    "\041\uffcf\042\uffcf\043\uffcf\044\uffcf\045\uffcf\046\uffcf\047" +
    "\uffcf\055\uffcf\065\uffcf\067\uffcf\001\002\000\066\012\uffd1" +
    "\013\uffd1\014\uffd1\022\uffd1\023\uffd1\024\uffd1\026\uffd1\027" +
    "\104\030\uffd1\032\uffd1\033\101\034\uffd1\035\uffd1\036\103" +
    "\037\072\040\uffd1\041\uffd1\042\uffd1\043\uffd1\044\uffd1\045" +
    "\uffd1\046\uffd1\047\uffd1\055\uffd1\065\uffd1\067\uffd1\001\002" +
    "\000\066\012\uffc7\013\uffc7\014\uffc7\022\uffc7\023\uffc7\024" +
    "\uffc7\026\uffc7\027\104\030\uffc7\032\uffc7\033\101\034\075" +
    "\035\071\036\103\037\072\040\076\041\074\042\105\043" +
    "\077\044\100\045\073\046\uffc7\047\uffc7\055\uffc7\065\uffc7" +
    "\067\uffc7\001\002\000\052\004\053\005\054\006\061\007" +
    "\055\015\060\016\027\017\024\020\026\025\050\031\052" +
    "\035\057\050\043\053\047\056\041\057\062\060\044\061" +
    "\051\062\046\063\056\066\037\001\002\000\004\023\140" +
    "\001\002\000\030\004\066\005\054\006\061\007\055\015" +
    "\060\025\050\035\057\050\043\061\051\062\046\063\056" +
    "\001\002\000\042\023\142\024\102\027\104\033\101\034" +
    "\075\035\071\036\103\037\072\040\076\041\074\042\105" +
    "\043\077\044\100\045\073\046\070\047\106\001\002\000" +
    "\052\004\053\005\054\006\061\007\055\015\060\016\027" +
    "\017\024\020\026\025\050\031\052\035\057\050\043\053" +
    "\047\056\041\057\062\060\044\061\051\062\046\063\056" +
    "\066\037\001\002\000\004\026\144\001\002\000\052\004" +
    "\053\005\054\006\061\007\055\015\060\016\027\017\024" +
    "\020\026\025\050\031\052\035\057\050\043\053\047\056" +
    "\041\057\062\060\044\061\051\062\046\063\056\066\037" +
    "\001\002\000\024\012\uffe3\013\uffe3\014\uffe3\023\uffe3\026" +
    "\uffe3\032\uffe3\055\uffe3\065\uffe3\067\uffe3\001\002\000\010" +
    "\025\153\027\ufffd\052\ufffd\001\002\000\006\027\150\052" +
    "\030\001\002\000\030\004\066\005\054\006\061\007\055" +
    "\015\060\025\050\035\057\050\043\061\051\062\046\063" +
    "\056\001\002\000\042\024\102\027\104\030\152\033\101" +
    "\034\075\035\071\036\103\037\072\040\076\041\074\042" +
    "\105\043\077\044\100\045\073\046\070\047\106\001\002" +
    "\000\066\012\uffd4\013\uffd4\014\uffd4\022\uffd4\023\uffd4\024" +
    "\uffd4\026\uffd4\027\uffd4\030\uffd4\032\uffd4\033\uffd4\034\uffd4" +
    "\035\uffd4\036\uffd4\037\uffd4\040\uffd4\041\uffd4\042\uffd4\043" +
    "\uffd4\044\uffd4\045\uffd4\046\uffd4\047\uffd4\055\uffd4\065\uffd4" +
    "\067\uffd4\001\002\000\032\004\066\005\054\006\061\007" +
    "\055\015\060\025\050\026\uffc2\035\057\050\043\061\051" +
    "\062\046\063\056\001\002\000\004\026\155\001\002\000" +
    "\066\012\uffd5\013\uffd5\014\uffd5\022\uffd5\023\uffd5\024\uffd5" +
    "\026\uffd5\027\uffd5\030\uffd5\032\uffd5\033\uffd5\034\uffd5\035" +
    "\uffd5\036\uffd5\037\uffd5\040\uffd5\041\uffd5\042\uffd5\043\uffd5" +
    "\044\uffd5\045\uffd5\046\uffd5\047\uffd5\055\uffd5\065\uffd5\067" +
    "\uffd5\001\002\000\066\012\uffce\013\uffce\014\uffce\022\uffce" +
    "\023\uffce\024\uffce\026\uffce\027\104\030\uffce\032\uffce\033" +
    "\101\034\uffce\035\uffce\036\uffce\037\uffce\040\uffce\041\uffce" +
    "\042\uffce\043\uffce\044\uffce\045\uffce\046\uffce\047\uffce\055" +
    "\uffce\065\uffce\067\uffce\001\002\000\024\012\uffe1\013\uffe1" +
    "\014\uffe1\023\uffe1\026\uffe1\032\uffe1\055\uffe1\065\uffe1\067" +
    "\uffe1\001\002\000\006\023\163\032\uffde\001\002\000\004" +
    "\032\162\001\002\000\024\012\uffe2\013\uffe2\014\uffe2\023" +
    "\uffe2\026\uffe2\032\uffe2\055\uffe2\065\uffe2\067\uffe2\001\002" +
    "\000\052\004\053\005\054\006\061\007\055\015\060\016" +
    "\027\017\024\020\026\025\050\031\052\035\057\050\043" +
    "\053\047\056\041\057\062\060\044\061\051\062\046\063" +
    "\056\066\037\001\002\000\004\032\uffdd\001\002\000\042" +
    "\024\102\026\166\027\104\033\101\034\075\035\071\036" +
    "\103\037\072\040\076\041\074\042\105\043\077\044\100" +
    "\045\073\046\070\047\106\001\002\000\066\012\uffc3\013" +
    "\uffc3\014\uffc3\022\uffc3\023\uffc3\024\uffc3\026\uffc3\027\uffc3" +
    "\030\uffc3\032\uffc3\033\uffc3\034\uffc3\035\uffc3\036\uffc3\037" +
    "\uffc3\040\uffc3\041\uffc3\042\uffc3\043\uffc3\044\uffc3\045\uffc3" +
    "\046\uffc3\047\uffc3\055\uffc3\065\uffc3\067\uffc3\001\002\000" +
    "\030\004\066\005\054\006\061\007\055\015\060\025\050" +
    "\035\057\050\043\061\051\062\046\063\056\001\002\000" +
    "\042\024\102\026\171\027\104\033\101\034\075\035\071" +
    "\036\103\037\072\040\076\041\074\042\105\043\077\044" +
    "\100\045\073\046\070\047\106\001\002\000\004\054\172" +
    "\001\002\000\052\004\053\005\054\006\061\007\055\015" +
    "\060\016\027\017\024\020\026\025\050\031\052\035\057" +
    "\050\043\053\047\056\041\057\062\060\044\061\051\062" +
    "\046\063\056\066\037\001\002\000\024\012\uffe6\013\uffe6" +
    "\014\uffe6\023\uffe6\026\uffe6\032\uffe6\055\174\065\uffe6\067" +
    "\uffe6\001\002\000\052\004\053\005\054\006\061\007\055" +
    "\015\060\016\027\017\024\020\026\025\050\031\052\035" +
    "\057\050\043\053\047\056\041\057\062\060\044\061\051" +
    "\062\046\063\056\066\037\001\002\000\024\012\uffe5\013" +
    "\uffe5\014\uffe5\023\uffe5\026\uffe5\032\uffe5\055\uffe5\065\uffe5" +
    "\067\uffe5\001\002\000\004\004\177\001\002\000\044\024" +
    "\uffff\025\200\027\uffff\033\uffff\034\uffff\035\uffff\036\uffff" +
    "\037\uffff\040\uffff\041\uffff\042\uffff\043\uffff\044\uffff\045" +
    "\uffff\046\uffff\047\uffff\051\uffff\001\002\000\032\004\066" +
    "\005\054\006\061\007\055\015\060\025\050\026\uffc2\035" +
    "\057\050\043\061\051\062\046\063\056\001\002\000\004" +
    "\026\202\001\002\000\062\012\uffe0\013\uffe0\014\uffe0\023" +
    "\uffe0\024\uffc4\026\uffe0\027\uffc4\032\uffe0\033\uffc4\034\uffc4" +
    "\035\uffc4\036\uffc4\037\uffc4\040\uffc4\041\uffc4\042\uffc4\043" +
    "\uffc4\044\uffc4\045\uffc4\046\uffc4\047\uffc4\055\uffe0\065\uffe0" +
    "\067\uffe0\001\002\000\062\012\uffe7\013\uffe7\014\uffe7\023" +
    "\uffe7\024\102\026\uffe7\027\104\032\uffe7\033\101\034\075" +
    "\035\071\036\103\037\072\040\076\041\074\042\105\043" +
    "\077\044\100\045\073\046\070\047\106\055\uffe7\065\uffe7" +
    "\067\uffe7\001\002\000\066\012\uffc5\013\uffc5\014\uffc5\022" +
    "\uffc5\023\uffc5\024\uffc5\026\uffc5\027\104\030\uffc5\032\uffc5" +
    "\033\101\034\075\035\071\036\103\037\072\040\076\041" +
    "\074\042\105\043\077\044\100\045\073\046\070\047\106" +
    "\055\uffc5\065\uffc5\067\uffc5\001\002\000\004\032\ufff1\001" +
    "\002\000\030\004\066\005\054\006\061\007\055\015\060" +
    "\025\050\035\057\050\043\061\051\062\046\063\056\001" +
    "\002\000\042\024\102\026\210\027\104\033\101\034\075" +
    "\035\071\036\103\037\072\040\076\041\074\042\105\043" +
    "\077\044\100\045\073\046\070\047\106\001\002\000\052" +
    "\004\053\005\054\006\061\007\055\015\060\016\027\017" +
    "\024\020\026\025\050\031\052\035\057\050\043\053\047" +
    "\056\041\057\062\060\044\061\051\062\046\063\056\066" +
    "\037\001\002\000\024\012\uffe4\013\uffe4\014\uffe4\023\uffe4" +
    "\026\uffe4\032\uffe4\055\uffe4\065\uffe4\067\uffe4\001\002\000" +
    "\004\051\213\001\002\000\030\004\066\005\054\006\061" +
    "\007\055\015\060\025\050\035\057\050\043\061\051\062" +
    "\046\063\056\001\002\000\062\012\uffe9\013\uffe9\014\uffe9" +
    "\023\uffe9\024\102\026\uffe9\027\104\032\uffe9\033\101\034" +
    "\075\035\071\036\103\037\072\040\076\041\074\042\105" +
    "\043\077\044\100\045\073\046\070\047\106\055\uffe9\065" +
    "\uffe9\067\uffe9\001\002\000\030\004\066\005\054\006\061" +
    "\007\055\015\060\025\050\035\057\050\043\061\051\062" +
    "\046\063\056\001\002\000\042\024\102\026\217\027\104" +
    "\033\101\034\075\035\071\036\103\037\072\040\076\041" +
    "\074\042\105\043\077\044\100\045\073\046\070\047\106" +
    "\001\002\000\024\012\uffdf\013\uffdf\014\uffdf\023\uffdf\026" +
    "\uffdf\032\uffdf\055\uffdf\065\uffdf\067\uffdf\001\002\000\006" +
    "\022\221\026\uffec\001\002\000\012\004\021\016\027\017" +
    "\024\020\026\001\002\000\004\026\uffeb\001\002\000\004" +
    "\002\ufff5\001\002\000\006\004\225\052\030\001\002\000" +
    "\016\012\016\013\020\014\013\032\ufff4\065\015\067\014" +
    "\001\002\000\004\032\ufff3\001\002\000\052\004\053\005" +
    "\054\006\061\007\055\015\060\016\027\017\024\020\026" +
    "\025\050\031\052\035\057\050\043\053\047\056\041\057" +
    "\062\060\044\061\051\062\046\063\056\066\037\001\002" +
    "\000\016\012\016\013\020\014\013\032\ufff4\065\015\067" +
    "\014\001\002\000\004\032\ufff0\001\002\000\016\012\016" +
    "\013\020\014\013\032\ufff4\065\015\067\014\001\002\000" +
    "\004\032\uffef\001\002\000\014\004\021\016\027\017\024" +
    "\020\026\026\uffee\001\002\000\004\026\236\001\002\000" +
    "\052\004\053\005\054\006\061\007\055\015\060\016\027" +
    "\017\024\020\026\025\050\031\052\035\057\050\043\053" +
    "\047\056\041\057\062\060\044\061\051\062\046\063\056" +
    "\066\037\001\002\000\016\012\016\013\020\014\013\032" +
    "\ufff4\065\015\067\014\001\002\000\004\032\ufff2\001\002" +
    "\000\004\032\242\001\002\000\004\002\ufff6\001\002\000" +
    "\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\241\000\004\003\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\004\240\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\004\016\001" +
    "\001\000\002\001\001\000\012\007\231\011\044\014\062" +
    "\015\037\001\001\000\002\001\001\000\004\015\223\001" +
    "\001\000\002\001\001\000\006\015\022\016\021\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\005" +
    "\034\006\032\015\033\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\007\041\011\044\014" +
    "\062\015\037\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\004\204\001\001\000\006\011" +
    "\203\014\066\001\001\000\006\011\202\014\066\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\011\164\014\066\001\001\000\002\001\001\000\014" +
    "\007\157\010\160\011\044\014\062\015\037\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\011\155\014\066\001\001\000\004\015" +
    "\146\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\011\064\014\066\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\011\134" +
    "\014\066\001\001\000\006\011\133\014\066\001\001\000" +
    "\006\011\132\014\066\001\001\000\006\011\131\014\066" +
    "\001\001\000\006\011\130\014\066\001\001\000\006\011" +
    "\127\014\066\001\001\000\006\011\126\014\066\001\001" +
    "\000\006\011\125\014\066\001\001\000\006\011\124\014" +
    "\066\001\001\000\002\001\001\000\004\015\113\001\001" +
    "\000\006\011\112\014\066\001\001\000\006\011\110\014" +
    "\066\001\001\000\006\011\107\014\066\001\001\000\006" +
    "\011\106\014\066\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\011\120\012" +
    "\117\013\116\014\066\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\011\120\013\122\014" +
    "\066\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\007\136\011" +
    "\044\014\062\015\037\001\001\000\002\001\001\000\006" +
    "\011\140\014\066\001\001\000\002\001\001\000\012\007" +
    "\142\011\044\014\062\015\037\001\001\000\002\001\001" +
    "\000\012\007\144\011\044\014\062\015\037\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\011\150\014\066\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\011\120\012\153\013\116\014\066\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\007\157\010\163\011\044\014\062\015" +
    "\037\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\011\167\014\066\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\007\172\011\044\014\062" +
    "\015\037\001\001\000\002\001\001\000\012\007\174\011" +
    "\044\014\062\015\037\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\011\120\012\200\013" +
    "\116\014\066\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\011\206\014\066\001\001\000\002\001\001\000\012" +
    "\007\210\011\044\014\062\015\037\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\011\213\014\066\001\001" +
    "\000\002\001\001\000\006\011\215\014\066\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\006\221\015\033\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\004\225\001\001\000\002" +
    "\001\001\000\012\007\227\011\044\014\062\015\037\001" +
    "\001\000\004\004\230\001\001\000\002\001\001\000\004" +
    "\004\232\001\001\000\002\001\001\000\010\005\234\006" +
    "\032\015\033\001\001\000\002\001\001\000\012\007\236" +
    "\011\044\014\062\015\037\001\001\000\004\004\237\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {

  return lexer.nextToken();

    }



/**
 * The lexical analyser used to preprocess the source file.
 */

  private Lexer lexer;

/**
 * Yields the error reporting utility used during parsing.
 *
 * @return the error reporting utility
 */

  public ErrorMsg getErrorMsg() {
    return lexer.getErrorMsg();
  }

/**
 * Reports a syntax error at a given token. This overrrides a method
 * in the superclass which is called whenever a syntax error must be reported.
 *
 * @param token the token where the message should be signalled
 */

  public void syntax_error(java_cup.runtime.Symbol token) {
    getErrorMsg().error(token.left, "syntax error");
  }

/**
 * Builds a syntactical analyser which uses a given lexical analyser
 * to tokenise the source file.
 *
 * @param lexer the lexical analyser which tokenises the input source file
 */

  public Parser(Lexer lexer) {
    this.lexer = lexer;
  }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // expseq_aux ::= exp COMMA expseq_aux 
            {
              ExpressionSeq RESULT = null;
		int headleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int headright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression head = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int tailleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int tailright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		ExpressionSeq tail = (ExpressionSeq)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = new ExpressionSeq(cleft,head,tail); 
              CUP$Parser$result = new java_cup.runtime.Symbol(9/*expseq_aux*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // expseq_aux ::= exp 
            {
              ExpressionSeq RESULT = null;
		int headleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int headright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Expression head = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = new ExpressionSeq(headleft,head,null); 
              CUP$Parser$result = new java_cup.runtime.Symbol(9/*expseq_aux*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // expseq ::= expseq_aux 
            {
              ExpressionSeq RESULT = null;
		int esleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int esright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		ExpressionSeq es = (ExpressionSeq)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = es; 
              CUP$Parser$result = new java_cup.runtime.Symbol(8/*expseq*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // expseq ::= 
            {
              ExpressionSeq RESULT = null;
		 RESULT = null; 
              CUP$Parser$result = new java_cup.runtime.Symbol(8/*expseq*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // exp ::= LPAREN exp RPAREN 
            {
              Expression RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = e; 
              CUP$Parser$result = new java_cup.runtime.Symbol(7/*exp*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // exp ::= exp DOT ID LPAREN expseq RPAREN 
            {
              Expression RESULT = null;
		int receiverleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int receiverright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Expression receiver = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int actualsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int actualsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ExpressionSeq actuals = (ExpressionSeq)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new MethodCallExpression(dleft, receiver, name, actuals); 
              CUP$Parser$result = new java_cup.runtime.Symbol(7/*exp*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // exp ::= NOT exp 
            {
              Expression RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = new Not(nleft,e); 
              CUP$Parser$result = new java_cup.runtime.Symbol(7/*exp*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // exp ::= exp OR exp 
            {
              Expression RESULT = null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression left = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Expression right = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = new Or(oleft,left,right); 
              CUP$Parser$result = new java_cup.runtime.Symbol(7/*exp*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // exp ::= exp AND exp 
            {
              Expression RESULT = null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression left = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Expression right = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = new And(oleft,left,right); 
              CUP$Parser$result = new java_cup.runtime.Symbol(7/*exp*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // exp ::= exp NEQ exp 
            {
              Expression RESULT = null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression left = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Expression right = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = new NotEqual(oleft,left,right); 
              CUP$Parser$result = new java_cup.runtime.Symbol(7/*exp*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // exp ::= exp EQ exp 
            {
              Expression RESULT = null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression left = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Expression right = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = new Equal(oleft,left,right); 
              CUP$Parser$result = new java_cup.runtime.Symbol(7/*exp*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // exp ::= exp GT exp 
            {
              Expression RESULT = null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression left = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Expression right = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = new GreaterThan(oleft,left,right); 
              CUP$Parser$result = new java_cup.runtime.Symbol(7/*exp*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // exp ::= exp LE exp 
            {
              Expression RESULT = null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression left = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Expression right = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = new LessThanOrEqual(oleft,left,right); 
              CUP$Parser$result = new java_cup.runtime.Symbol(7/*exp*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // exp ::= exp LT exp 
            {
              Expression RESULT = null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression left = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Expression right = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = new LessThan(oleft,left,right); 
              CUP$Parser$result = new java_cup.runtime.Symbol(7/*exp*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // exp ::= exp GE exp 
            {
              Expression RESULT = null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression left = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Expression right = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = new GreaterThanOrEqual(oleft,left,right); 
              CUP$Parser$result = new java_cup.runtime.Symbol(7/*exp*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // exp ::= MINUS exp 
            {
              Expression RESULT = null;
		int uleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int uright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object u = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = new Minus(uleft,e); 
              CUP$Parser$result = new java_cup.runtime.Symbol(7/*exp*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // exp ::= exp DIVIDE exp 
            {
              Expression RESULT = null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression left = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Expression right = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = new Division(dleft,left,right); 
              CUP$Parser$result = new java_cup.runtime.Symbol(7/*exp*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // exp ::= exp TIMES exp 
            {
              Expression RESULT = null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression left = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Expression right = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = new Multiplication(tleft,left,right); 
              CUP$Parser$result = new java_cup.runtime.Symbol(7/*exp*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // exp ::= exp MINUS exp 
            {
              Expression RESULT = null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression left = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Expression right = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = new Subtraction(mleft,left,right); 
              CUP$Parser$result = new java_cup.runtime.Symbol(7/*exp*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // exp ::= exp PLUS exp 
            {
              Expression RESULT = null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression left = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Expression right = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = new Addition(pleft,left,right); 
              CUP$Parser$result = new java_cup.runtime.Symbol(7/*exp*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // exp ::= exp AS type 
            {
              Expression RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int asleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int asright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object as = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		TypeExpression t = (TypeExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = new Cast(asleft,t,e); 
              CUP$Parser$result = new java_cup.runtime.Symbol(7/*exp*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // exp ::= NEW type LBRACK exp RBRACK 
            {
              Expression RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		TypeExpression t = (TypeExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int sizeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sizeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expression size = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new NewArray(nleft,t,size); 
              CUP$Parser$result = new java_cup.runtime.Symbol(7/*exp*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // exp ::= NEW ID LPAREN expseq RPAREN 
            {
              Expression RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int actualsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int actualsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ExpressionSeq actuals = (ExpressionSeq)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new NewObject(nleft, id, actuals); 
              CUP$Parser$result = new java_cup.runtime.Symbol(7/*exp*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // exp ::= NIL 
            {
              Expression RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = new Nil(nleft); 
              CUP$Parser$result = new java_cup.runtime.Symbol(7/*exp*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // exp ::= STRING 
            {
              Expression RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = new StringLiteral(sleft,s); 
              CUP$Parser$result = new java_cup.runtime.Symbol(7/*exp*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // exp ::= FLOATING 
            {
              Expression RESULT = null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Float f = (Float)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = new FloatLiteral(fleft,f.floatValue()) ; 
              CUP$Parser$result = new java_cup.runtime.Symbol(7/*exp*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // exp ::= INTEGER 
            {
              Expression RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = new IntLiteral(ileft,i.intValue()); 
              CUP$Parser$result = new java_cup.runtime.Symbol(7/*exp*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // exp ::= FALSE 
            {
              Expression RESULT = null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = new False(fleft); 
              CUP$Parser$result = new java_cup.runtime.Symbol(7/*exp*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // exp ::= TRUE 
            {
              Expression RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = new True(tleft); 
              CUP$Parser$result = new java_cup.runtime.Symbol(7/*exp*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // exp ::= lvalue 
            {
              Expression RESULT = null;
		int lvalueleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int lvalueright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Lvalue lvalue = (Lvalue)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = lvalue; 
              CUP$Parser$result = new java_cup.runtime.Symbol(7/*exp*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // comseq ::= com SEMICOLON comseq 
            {
              Command RESULT = null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Command f = (Command)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Command s = (Command)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = new CommandSeq(cleft,f,s); 
              CUP$Parser$result = new java_cup.runtime.Symbol(6/*comseq*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // comseq ::= com 
            {
              Command RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Command c = (Command)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = c; 
              CUP$Parser$result = new java_cup.runtime.Symbol(6/*comseq*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // com ::= ASSERT LPAREN exp RPAREN 
            {
              Command RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int conditionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int conditionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expression condition = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Assert(aleft, condition); 
              CUP$Parser$result = new java_cup.runtime.Symbol(5/*com*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // com ::= exp DOT ID LPAREN expseq RPAREN 
            {
              Command RESULT = null;
		int receiverleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int receiverright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Expression receiver = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int actualsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int actualsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ExpressionSeq actuals = (ExpressionSeq)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new MethodCallCommand(dleft, receiver, name, actuals); 
              CUP$Parser$result = new java_cup.runtime.Symbol(5/*com*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // com ::= LBRACE RBRACE 
            {
              Command RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Skip(pleft); 
              CUP$Parser$result = new java_cup.runtime.Symbol(5/*com*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // com ::= LBRACE comseq RBRACE 
            {
              Command RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Command c = (Command)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new LocalScope(pleft,c); 
              CUP$Parser$result = new java_cup.runtime.Symbol(5/*com*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // com ::= FOR LPAREN com SEMICOLON exp SEMICOLON com RPAREN com 
            {
              Command RESULT = null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int initialisationleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int initialisationright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Command initialisation = (Command)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int conditionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int conditionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Expression condition = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int updateleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int updateright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Command update = (Command)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Command body = (Command)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = new For(fleft,initialisation,condition,update,body); 
              CUP$Parser$result = new java_cup.runtime.Symbol(5/*com*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // com ::= WHILE LPAREN exp RPAREN com 
            {
              Command RESULT = null;
		int wleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object w = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int conditionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int conditionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression condition = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Command body = (Command)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = new While(wleft,condition,body); 
              CUP$Parser$result = new java_cup.runtime.Symbol(5/*com*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // com ::= IF LPAREN exp RPAREN THEN com ELSE com 
            {
              Command RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int conditionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int conditionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Expression condition = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int thenleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int thenright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Command then = (Command)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int _elseleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int _elseright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Command _else = (Command)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = new IfThenElse(ileft,condition,then,_else); 
              CUP$Parser$result = new java_cup.runtime.Symbol(5/*com*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // com ::= IF LPAREN exp RPAREN THEN com 
            {
              Command RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int conditionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int conditionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Expression condition = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int thenleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int thenright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Command then = (Command)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = new IfThenElse(ileft,condition,then); 
              CUP$Parser$result = new java_cup.runtime.Symbol(5/*com*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // com ::= RETURN exp 
            {
              Command RESULT = null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int returnedleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int returnedright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Expression returned = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = new Return(rleft,returned); 
              CUP$Parser$result = new java_cup.runtime.Symbol(5/*com*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // com ::= RETURN 
            {
              Command RESULT = null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = new Return(rleft,null); 
              CUP$Parser$result = new java_cup.runtime.Symbol(5/*com*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // com ::= type ID ASSIGN exp 
            {
              Command RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		TypeExpression t = (TypeExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int initialiserleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int initialiserright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Expression initialiser = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = new LocalDeclaration(tleft,t, id, initialiser); 
              CUP$Parser$result = new java_cup.runtime.Symbol(5/*com*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // com ::= lvalue ASSIGN exp 
            {
              Command RESULT = null;
		int leftvalueleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int leftvalueright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Lvalue leftvalue = (Lvalue)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int rightvalueleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int rightvalueright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Expression rightvalue = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = new Assignment(aleft,leftvalue,rightvalue); 
              CUP$Parser$result = new java_cup.runtime.Symbol(5/*com*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // formals_aux ::= type ID COMMA formals_aux 
            {
              FormalParameters RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		TypeExpression t = (TypeExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int nextleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int nextright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		FormalParameters next = (FormalParameters)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = new FormalParameters(tleft,t, id, next); 
              CUP$Parser$result = new java_cup.runtime.Symbol(4/*formals_aux*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // formals_aux ::= type ID 
            {
              FormalParameters RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		TypeExpression t = (TypeExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = new FormalParameters(tleft,t, id, null); 
              CUP$Parser$result = new java_cup.runtime.Symbol(4/*formals_aux*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // formals ::= formals_aux 
            {
              FormalParameters RESULT = null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		FormalParameters f = (FormalParameters)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = f; 
              CUP$Parser$result = new java_cup.runtime.Symbol(3/*formals*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // formals ::= 
            {
              FormalParameters RESULT = null;
		 RESULT = null; 
              CUP$Parser$result = new java_cup.runtime.Symbol(3/*formals*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // class_members ::= FIXTURE com class_members 
            {
              ClassMemberDeclaration RESULT = null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Command body = (Command)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int nextleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int nextright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		ClassMemberDeclaration next = (ClassMemberDeclaration)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = new FixtureDeclaration(fleft, body, next); 
              CUP$Parser$result = new java_cup.runtime.Symbol(2/*class_members*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // class_members ::= TEST ID com class_members 
            {
              ClassMemberDeclaration RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Command body = (Command)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int nextleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int nextright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		ClassMemberDeclaration next = (ClassMemberDeclaration)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = new TestDeclaration(tleft, body, next, name); 
              CUP$Parser$result = new java_cup.runtime.Symbol(2/*class_members*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // class_members ::= METHOD typeplus ID LPAREN formals RPAREN com class_members 
            {
              ClassMemberDeclaration RESULT = null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int returnTypeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int returnTyperight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		TypeExpression returnType = (TypeExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int formalsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int formalsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		FormalParameters formals = (FormalParameters)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Command body = (Command)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int nextleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int nextright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		ClassMemberDeclaration next = (ClassMemberDeclaration)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = new MethodDeclaration
	(mleft, returnType, name, formals, body, next); 
              CUP$Parser$result = new java_cup.runtime.Symbol(2/*class_members*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // class_members ::= CONSTRUCTOR LPAREN formals RPAREN com class_members 
            {
              ClassMemberDeclaration RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int formalsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int formalsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		FormalParameters formals = (FormalParameters)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Command body = (Command)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int nextleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int nextright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		ClassMemberDeclaration next = (ClassMemberDeclaration)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = new ConstructorDeclaration(cleft,formals,body,next); 
              CUP$Parser$result = new java_cup.runtime.Symbol(2/*class_members*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // class_members ::= FIELD type ID class_members 
            {
              ClassMemberDeclaration RESULT = null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		TypeExpression t = (TypeExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int nextleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int nextright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		ClassMemberDeclaration next = (ClassMemberDeclaration)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = new FieldDeclaration(fleft, t, name, next); 
              CUP$Parser$result = new java_cup.runtime.Symbol(2/*class_members*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // class_members ::= 
            {
              ClassMemberDeclaration RESULT = null;
		 RESULT = null; 
              CUP$Parser$result = new java_cup.runtime.Symbol(2/*class_members*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // class ::= CLASS ID EXTENDS ID LBRACE class_members RBRACE 
            {
              ClassDefinition RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int superclassleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int superclassright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String superclass = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int declarationsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int declarationsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ClassMemberDeclaration declarations = (ClassMemberDeclaration)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new ClassDefinition
	(cleft, name, superclass, declarations); 
              CUP$Parser$result = new java_cup.runtime.Symbol(1/*class*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // class ::= CLASS ID LBRACE class_members RBRACE 
            {
              ClassDefinition RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int declarationsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int declarationsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ClassMemberDeclaration declarations = (ClassMemberDeclaration)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new ClassDefinition
	(cleft, name, "Object", declarations); 
              CUP$Parser$result = new java_cup.runtime.Symbol(1/*class*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // typeplus ::= VOID 
            {
              TypeExpression RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = new VoidTypeExpression(vleft); 
              CUP$Parser$result = new java_cup.runtime.Symbol(12/*typeplus*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // typeplus ::= type 
            {
              TypeExpression RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		TypeExpression t = (TypeExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = t; 
              CUP$Parser$result = new java_cup.runtime.Symbol(12/*typeplus*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // type ::= type ARRAYSYMBOL 
            {
              TypeExpression RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		TypeExpression t = (TypeExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = new ArrayTypeExpression(aleft, t); 
              CUP$Parser$result = new java_cup.runtime.Symbol(11/*type*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // type ::= FLOAT 
            {
              TypeExpression RESULT = null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = new FloatTypeExpression(fleft); 
              CUP$Parser$result = new java_cup.runtime.Symbol(11/*type*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // type ::= INT 
            {
              TypeExpression RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = new IntTypeExpression(ileft); 
              CUP$Parser$result = new java_cup.runtime.Symbol(11/*type*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // type ::= BOOLEAN 
            {
              TypeExpression RESULT = null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = new BooleanTypeExpression(bleft); 
              CUP$Parser$result = new java_cup.runtime.Symbol(11/*type*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // type ::= ID 
            {
              TypeExpression RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = new ClassTypeExpression(idleft, id); 
              CUP$Parser$result = new java_cup.runtime.Symbol(11/*type*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // lvalue ::= exp LBRACK exp RBRACK 
            {
              Lvalue RESULT = null;
		int arrayleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int arrayright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Expression array = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int indexleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int indexright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expression index = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new ArrayAccess(bleft,array,index); 
              CUP$Parser$result = new java_cup.runtime.Symbol(10/*lvalue*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // lvalue ::= exp DOT ID 
            {
              Lvalue RESULT = null;
		int receiverleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int receiverright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression receiver = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int fieldleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int fieldright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		String field = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = new FieldAccess(dleft,receiver, field); 
              CUP$Parser$result = new java_cup.runtime.Symbol(10/*lvalue*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // lvalue ::= ID 
            {
              Lvalue RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = new Variable(idleft, id); 
              CUP$Parser$result = new java_cup.runtime.Symbol(10/*lvalue*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= class EOF 
            {
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ClassDefinition start_val = (ClassDefinition)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

